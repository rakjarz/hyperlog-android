apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

ext {
    siteUrl = 'https://github.com/hypertrack/hyperlog-android'
    gitUrl = 'https://github.com/hypertrack/hyperlog-android.git'

    libraryVersion = computeVersionName()

    developerId = 'piyushgupta27'
    developerName = 'Piyush Gupta'
    developerEmail = 'piyush@hypertrack.io'

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'http://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

afterEvaluate{
    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.hyper'
                artifactId = 'hyperlog'
                version = computeVersionName()
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the release build variant.
                from components.debug

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.hyper'
                artifactId = 'hyperlog-debug'
                version = computeVersionName()
            }
        }
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api 'androidx.appcompat:appcompat:1.3.0'
    api 'com.google.code.gson:gson:2.8.6'
}

def computeVersionName() {
    def versionPropsFile = file('gradle.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('internalRelease' in runTasks || 'iR' in runTasks) {
            value = 1
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['version'] = versionMajor + "." + versionMinor + "." + versionPatch
        versionProps.store(versionPropsFile.newWriter(), null)

        return versionMajor + "." + versionMinor + "." + versionPatch
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}